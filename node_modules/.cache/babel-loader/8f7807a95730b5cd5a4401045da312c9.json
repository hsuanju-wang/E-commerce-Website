{"ast":null,"code":"var _jsxFileName = \"/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw6-hsuanjuw/src/containers/LogIn/LogIn.js\";\nimport React, { useState } from 'react';\nimport appRoutes from '../../shared/appRoutes';\nimport { getAuth, signInWithPopup, signOut, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\nimport GoogleImg from '../../assets/images/google-logo.png';\nimport app from '../../index';\nimport './LogIn.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NavBar = auth => {\n  const provider = new GoogleAuthProvider();\n  const logIn = () => {\n    signInWithPopup(auth, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n      // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n  };\n\n  const logOut = () => {\n    signOut(auth).then(() => {\n      // Sign-out successful.\n    }).catch(error => {\n      // An error happened.\n    });\n  };\n\n  // onAuthStateChanged(auth, (user) => {\n  //     if (user) {\n  //       const uid = user.uid;\n  //       // ...\n  //     } else {\n  //       // User is signed out\n  //       // ...\n  //     }\n  //   });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logInContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"logInBtn\",\n      id: \"logInBtn\",\n      onClick: () => logIn(),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: GoogleImg,\n        id: \"google-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Log In with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"logInBtn\",\n      id: \"logOutBtn\",\n      onClick: () => logOut(),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: GoogleImg,\n        id: \"google-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Log In with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_c = NavBar;\nexport default NavBar;\nvar _c;\n$RefreshReg$(_c, \"NavBar\");","map":{"version":3,"names":["React","useState","appRoutes","getAuth","signInWithPopup","signOut","GoogleAuthProvider","onAuthStateChanged","GoogleImg","app","NavBar","auth","provider","logIn","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","logOut"],"sources":["/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw6-hsuanjuw/src/containers/LogIn/LogIn.js"],"sourcesContent":["import React, { useState } from 'react';\nimport appRoutes from '../../shared/appRoutes';\nimport { getAuth, signInWithPopup,signOut, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\n\nimport GoogleImg from '../../assets/images/google-logo.png';\nimport app from '../../index';\nimport './LogIn.css';\n\nconst NavBar = (auth) =>  {\n    const provider = new GoogleAuthProvider();\n\n    const logIn = () => {\n        signInWithPopup(auth, provider)\n            .then((result) => {\n                // This gives you a Google Access Token. You can use it to access the Google API.\n                const credential = GoogleAuthProvider.credentialFromResult(result);\n                const token = credential.accessToken;\n                // The signed-in user info.\n                const user = result.user;\n                // ...\n            }).catch((error) => {\n                // Handle Errors here.\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                // The email of the user's account used.\n                const email = error.customData.email;\n                // The AuthCredential type that was used.\n                const credential = GoogleAuthProvider.credentialFromError(error);\n                // ...\n            });\n    }\n\n    const logOut= () => {\n        signOut(auth).then(() => {\n            // Sign-out successful.\n          }).catch((error) => {\n            // An error happened.\n          });\n    }\n\n    // onAuthStateChanged(auth, (user) => {\n    //     if (user) {\n    //       const uid = user.uid;\n    //       // ...\n    //     } else {\n    //       // User is signed out\n    //       // ...\n    //     }\n    //   });\n\n    return (\n        <div className='logInContainer'>\n            <button className='logInBtn' id='logInBtn' onClick={() => logIn()}>\n                <img src={GoogleImg} id=\"google-logo\"/>\n                <p>Log In with Google</p>\n            </button>\n            <button className='logInBtn' id='logOutBtn' onClick={() => logOut()}>\n                <img src={GoogleImg} id=\"google-logo\"/>\n                <p>Log In with Google</p>\n            </button>\n        </div>     \n    )\n}\nexport default NavBar;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,OAAO,EAAEC,eAAe,EAACC,OAAO,EAAEC,kBAAkB,EAAEC,kBAAkB,QAAQ,eAAe;AAExG,OAAOC,SAAS,MAAM,qCAAqC;AAC3D,OAAOC,GAAG,MAAM,aAAa;AAC7B,OAAO,aAAa;AAAC;AAErB,MAAMC,MAAM,GAAIC,IAAI,IAAM;EACtB,MAAMC,QAAQ,GAAG,IAAIN,kBAAkB,EAAE;EAEzC,MAAMO,KAAK,GAAG,MAAM;IAChBT,eAAe,CAACO,IAAI,EAAEC,QAAQ,CAAC,CAC1BE,IAAI,CAAEC,MAAM,IAAK;MACd;MACA,MAAMC,UAAU,GAAGV,kBAAkB,CAACW,oBAAoB,CAACF,MAAM,CAAC;MAClE,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAW;MACpC;MACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAAI;MACxB;IACJ,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAChB;MACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;MAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;MAClC;MACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAU,CAACD,KAAK;MACpC;MACA,MAAMX,UAAU,GAAGV,kBAAkB,CAACuB,mBAAmB,CAACP,KAAK,CAAC;MAChE;IACJ,CAAC,CAAC;EACV,CAAC;;EAED,MAAMQ,MAAM,GAAE,MAAM;IAChBzB,OAAO,CAACM,IAAI,CAAC,CAACG,IAAI,CAAC,MAAM;MACrB;IACF,CAAC,CAAC,CAACO,KAAK,CAAEC,KAAK,IAAK;MAClB;IACF,CAAC,CAAC;EACR,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACI;IAAK,SAAS,EAAC,gBAAgB;IAAA,wBAC3B;MAAQ,SAAS,EAAC,UAAU;MAAC,EAAE,EAAC,UAAU;MAAC,OAAO,EAAE,MAAMT,KAAK,EAAG;MAAA,wBAC9D;QAAK,GAAG,EAAEL,SAAU;QAAC,EAAE,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QAAE,eACvC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAyB;IAAA;MAAA;MAAA;MAAA;IAAA,QACpB,eACT;MAAQ,SAAS,EAAC,UAAU;MAAC,EAAE,EAAC,WAAW;MAAC,OAAO,EAAE,MAAMsB,MAAM,EAAG;MAAA,wBAChE;QAAK,GAAG,EAAEtB,SAAU;QAAC,EAAE,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QAAE,eACvC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAyB;IAAA;MAAA;MAAA;MAAA;IAAA,QACpB;EAAA;IAAA;IAAA;IAAA;EAAA,QACP;AAEd,CAAC;AAAA,KAtDKE,MAAM;AAuDZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module"}